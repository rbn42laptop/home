* keyboard
** swapesc
按键习惯真是可怕，要改变起来还真难
强制把大拇指藏在键盘下。够不到esc的话，习惯就慢慢改了吧
* vim
** menu
Wed 25 May 2016 02:15:59 PM NZST
给vim做一个菜单栏.
很多插件都有提供很多命令可用,但是必须要查看其文档.

做这么一个功能,按下快捷键,打开一个菜单栏,其中用属性结构放置各种插件的命令模板,可以对树进行查询.
然后选择命令模板之后,直接执行,或者编辑后执行.

这有点像是rofi之于dmenu的增强改动. 

eclim就是有很多命令使用方式.

Wed 25 May 2016 02:29:54 PM NZST
不过比起学新插件的时候查文档,写插件费事多了.
主要是eclim的 project create,这样的命令让人觉得很怪异,不可能背下来的吧?
但是代码跳转,格式化什么的,只要看一次就够了,之后就是写入vimrc映射shortcut了
不过重命名还是有点怪异的,好像上次用过不怎么好用.就好象vim的replace,我从来没记住过,先在基本简单的replace主要依赖multicursor来处理的吧,复杂的就用gedit了
这个操作平时也不多,所以放eclipse处理也够了,代码跳转倒是更重要
** TODO
学一下宏的用法.
** idea
2016-07-03 23:57:33 Sun NZST
vim 插件,用一个类似vimfx一样的按键帮助提示?
** eclim
Wed 25 May 2016 02:25:22 PM NZST

http://eclim.org/cheatsheet.html
我们需要哪些功能?
refactor rename,已有
view implement 已有
暂时想到也就这些
* emacs
** root
2016-07-24 12:10:00 Sun NZST
evil mode
org mode

vim的相对弱项,
java?eclim怎么样?
html,md,tex,git?
这些非常用,所以如果想要转emacs的话,应该是要编写这些这些东西的时候.

2016-07-24 22:52:25 Sun NZST
暂且来看,vim中不会有相对完整的orgmode功能
不过我也不需要那么完整的,实际上,除了折叠headline以外的功能我都不知道能不能用上.
不过TODO倒是似乎会有用.
那么到底是用vim-orgmode还是用emacs-evil呢?

emacs的话,界面还未调整,还有文件备份没有处理过,还有timestamp

** 一般操作
** 保存退出
*** 期望
期望是可以和vim一样,按q退出一个buffer,如果没有其他buffer了,就完全退出.
*** 现状 
现在的map是,完全退出emacs,并且不询问是否保存.
*** 分析
由于无法选择退出单一buffer,所以现在不能用emacs处理多文件,
不过处理多文件并不是那么常见,嗯,至少处理单一脚本的时候,就用不到这样的功能.
至于保存询问,一般来说,在vim模式下,改完之后都会顺手按s保存,所以,退出的时候不做询问,勉强不算问题.
** orgmode
*** 熟悉阶段的一些规则.
**** 禁止文本内部复制黏贴
尽量用org的方式来调整文本结构.
毕竟复制粘贴的方式调整文本结构实在是太熟练了,而且可以处理任何问题.
但是显然相比org约束性不够,存在打乱文本结构的问题.
**** 不要打"*"星号
为了熟悉org增加条目,和修改条目级别的方式.
**** 减少vim导航键的使用
尤其是gg和G,还有jk,尽量用org的条目行走方式
*** 看法
**** 横屏编辑 
    org似乎很适合横屏编辑,因为的确需要有足够的屏高,来展示tree.
主要原因应该在于,由于org是tree结构而不是线性结构,所以带来了上下翻滚的可能性
实际上原本做线性编辑的话,之前写下的东西过后可能是不再翻看了,而是完全靠大脑回忆.
所以就没有上下翻阅的必要了.
**** 文件分割
使用org的话,基本上就是把原本分散的文件都集合在一起了.
集合在一起,并且通过org的树结构导航.
这个文件树相比的优势是什么呢?
直观的来说是,这个树的确比文件树容易操作.树结构和文件内容混搭在了一起.
但有一个问题是文件安全性降低了,因为所有的东西都在一起被emacs访问了,一个误操作会影响到全局.
更大的问题是,文件变复杂了,甚至于出现误操作,你都不一定马上会意识到.
但是,如果有通过github做版本控制的话,这个安全问题可以一定程度弥补回来.
总体来说,就是这不plain text的功能性更强,但是随之而来的是文件复杂性,会要求大脑付出更多注意力来控制.
不过org的设计还有树结构以外的其他功能
**** 线形和树形编辑对比
嗯,我不觉的线形编辑是劣于树形编辑的,因为前者把必要的信息维持在了脑中,而后者则更多的依赖外物.
我认为信息维持在脑中有些情形下是很必要的,这会增大思维活跃性,而把自己的思维绑定在一个作为
外物的tree上的时候,活跃性是会减弱的,人是会被约束的.
*** 想要学的功能
**** 切换到星号以外的树结构标记
 之前在youtube看过,确认有这个功能,
 不过即使切换,依旧还是树结构,所以其实对于结构没有影响,
 影响到的仅仅是外观.
 由于在文本结构固定后,什么时候切换都是可以的,所以这个功能以后学也没有问题.
 不过,总觉的有些条目的罗列性质强于另一些,所以多少会想要把这些条目的星号换成数字.
**** 表格
 其实基本的很容易就学会了.主要是似乎没什么用到的场合.
**** 排序
有些条目的序列性不强,所以坐下字符串排序方便查找?
还是说最好我们能加强树的纵深,减小branch宽度.
*** 论文
有表格,还有一个org-ref.
或许org可以直接用来写论文,转换成latex?
不过如果可以的话网上应该有介绍的.
至少org只有组织功能,没有排版功能,特别是要混合图片的话.
** 主题
主要是改下背景色,还有制表符,下划线.
这大概必须要进一步的熟悉emacs后才方便做.
** autoformat
格式化,vim的格式化是很局限的.
不过vim的python支持的确很好,整合了pep8,所以至少python的格式化并不是问题.
*** 期望
    期望能够格式化的类型
python有pep8,所以应该肯定能做到的.
c有clang,估计也不是问题,
js,html,css等web文件
应该也和vim一样有专业的外部文件引入可以处理
然后是org,不过至少编辑阶段格式就不会太乱了.
bash,这个不算偏门,但是似乎没有独立工具能格式化bash
qml,这个比较偏门,应该很难指望,不过用到的场合也不多.
** vim特有的功能
*** multicursor
*** motion
基础的motion evil是提供了,但是vim plugin中还有更高级的motion,
虽然我用的也不多,但是有的时候还是很方便的.
*** ctrl p
文件查找这种基本功能,估计emacs应该会提供吧?
*** silversearch
这个同样是外部功能,应该会提供整合吧.
* root
2016-07-25 13:21:42 Mon NZST
  想到什么的时候再往这里添加.
主要是罗列各种问题,有些问题可以暂且容忍,
但是由于问题存在,所以有些事情就不能用emacs处理.
在将来如果把更多事务交给emacs处理,或许会在整合性上带来好处.

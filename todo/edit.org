* root
2016-07-25 13:21:42 Mon NZST
  想到什么的时候再往这里添加.
主要是罗列各种问题,有些问题可以暂且容忍,
但是由于问题存在,所以有些事情就不能用emacs处理.
在将来如果把更多事务交给emacs处理,或许会在整合性上带来好处.
* keyboard
** swapesc
按键习惯真是可怕，要改变起来还真难
强制把大拇指藏在键盘下。够不到esc的话，习惯就慢慢改了吧
* vim
** menu
Wed 25 May 2016 02:15:59 PM NZST
给vim做一个菜单栏.
很多插件都有提供很多命令可用,但是必须要查看其文档.

做这么一个功能,按下快捷键,打开一个菜单栏,其中用属性结构放置各种插件的命令模板,可以对树进行查询.
然后选择命令模板之后,直接执行,或者编辑后执行.

这有点像是rofi之于dmenu的增强改动. 

eclim就是有很多命令使用方式.

Wed 25 May 2016 02:29:54 PM NZST
不过比起学新插件的时候查文档,写插件费事多了.
主要是eclim的 project create,这样的命令让人觉得很怪异,不可能背下来的吧?
但是代码跳转,格式化什么的,只要看一次就够了,之后就是写入vimrc映射shortcut了
不过重命名还是有点怪异的,好像上次用过不怎么好用.就好象vim的replace,我从来没记住过,先在基本简单的replace主要依赖multicursor来处理的吧,复杂的就用gedit了
这个操作平时也不多,所以放eclipse处理也够了,代码跳转倒是更重要
** TODO
学一下宏的用法.
** idea
2016-07-03 23:57:33 Sun NZST
vim 插件,用一个类似vimfx一样的按键帮助提示?
** 帮助
- :map :: 找出keybind
** eclim
Wed 25 May 2016 02:25:22 PM NZST

http://eclim.org/cheatsheet.html
我们需要哪些功能?
refactor rename,已有
view implement 已有
暂时想到也就这些
* emacs
** root
2016-07-24 12:10:00 Sun NZST
evil mode
org mode

vim的相对弱项,
java?eclim怎么样?
html,md,tex,git?
这些非常用,所以如果想要转emacs的话,应该是要编写这些这些东西的时候.

2016-07-24 22:52:25 Sun NZST
暂且来看,vim中不会有相对完整的orgmode功能
不过我也不需要那么完整的,实际上,除了折叠headline以外的功能我都不知道能不能用上.
不过TODO倒是似乎会有用.
那么到底是用vim-orgmode还是用emacs-evil呢?

emacs的话,界面还未调整,还有文件备份没有处理过,还有timestamp

** 一般操作
** lisp
   2016-07-26 06:45:56 Tue NZST
   emacs和vim的对比感觉.
一些vim中的插件,或者api,
在emacs中似乎都是以lisp代码串的形式存在的.
所以给人感觉似乎lisp的确很万能.
** 保存退出
*** 期望
期望是可以和vim一样,按q退出一个buffer,如果没有其他buffer了,就完全退出.
*** 现状 
现在的map是,完全退出emacs,并且不询问是否保存.
*** 分析
由于无法选择退出单一buffer,所以现在不能用emacs处理多文件,
不过处理多文件并不是那么常见,嗯,至少处理单一脚本的时候,就用不到这样的功能.
至于保存询问,一般来说,在vim模式下,改完之后都会顺手按s保存,所以,退出的时候不做询问,勉强不算问题.
** 主题
主要是改下背景色,还有制表符,下划线.
这大概必须要进一步的熟悉emacs后才方便做.
** autoformat
格式化,vim的格式化是很局限的.
不过vim的python支持的确很好,整合了pep8,所以至少python的格式化并不是问题.
*** 期望
    期望能够格式化的类型
python有pep8,所以应该肯定能做到的.
c有clang,估计也不是问题,
js,html,css等web文件
应该也和vim一样有专业的外部文件引入可以处理
然后是org,不过至少编辑阶段格式就不会太乱了.
bash,这个不算偏门,但是似乎没有独立工具能格式化bash
qml,这个比较偏门,应该很难指望,不过用到的场合也不多.
** vim特有的功能
*** multicursor
*** motion
基础的motion evil是提供了,但是vim plugin中还有更高级的motion,
虽然我用的也不多,但是有的时候还是很方便的.
*** ctrl p
文件查找这种基本功能,估计emacs应该会提供吧?
*** silversearch
这个同样是外部功能,应该会提供整合吧.
** 比较vim 
   emacs似乎是有总的后台进程的,所以多个emacs打开同一个文件的时候,后台进程会协调同步.
   对比来说,vim只能允许单一进程打开一个文件
   
   但是emacs的确比较重,在这台firefox会经常性崩溃,编译,python经常 seg error的电脑上,vim有时候会在退出的时候提示错误,但是运行中没有出过问题,不过刚才emacs在运行中就报bug退出了.
   
** evil mode
evilmode的优势.
由于emacs的自动化程度比vim高,所以emacs下需要的键映射或许也比vim多.
而vim的normal mode提供了一个很大的键映射空间,一些不常用的键映射都可以改掉.
* orgmode 这里是我的一些想法,不是manual记录
** 熟悉阶段的一些规则.
*** 禁止文本内部复制黏贴
尽量用org的方式来调整文本结构.
毕竟复制粘贴的方式调整文本结构实在是太熟练了,而且可以处理任何问题.
但是显然相比org约束性不够,存在打乱文本结构的问题.
*** 不要打"*"星号
为了熟悉org增加条目,和修改条目级别的方式.
*** 减少vim导航键的使用
尤其是gg和G,还有jk,尽量用org的条目行走方式
** 看法
*** 横屏编辑 
    org似乎很适合横屏编辑,因为的确需要有足够的屏高,来展示tree.
主要原因应该在于,由于org是tree结构而不是线性结构,所以带来了上下翻滚的可能性
实际上原本做线性编辑的话,之前写下的东西过后可能是不再翻看了,而是完全靠大脑回忆.
所以就没有上下翻阅的必要了.
*** 文件分割
使用org的话,基本上就是把原本分散的文件都集合在一起了.
集合在一起,并且通过org的树结构导航.
这个文件树相比的优势是什么呢?
直观的来说是,这个树的确比文件树容易操作.树结构和文件内容混搭在了一起.
但有一个问题是文件安全性降低了,因为所有的东西都在一起被emacs访问了,一个误操作会影响到全局.
更大的问题是,文件变复杂了,甚至于出现误操作,你都不一定马上会意识到.
但是,如果有通过github做版本控制的话,这个安全问题可以一定程度弥补回来.
总体来说,就是这不plain text的功能性更强,但是随之而来的是文件复杂性,会要求大脑付出更多注意力来控制.
不过org的设计还有树结构以外的其他功能
*** 线形和树形编辑对比
嗯,我不觉的线形编辑是劣于树形编辑的,因为前者把必要的信息维持在了脑中,而后者则更多的依赖外物.
我认为信息维持在脑中有些情形下是很必要的,这会增大思维活跃性,而把自己的思维绑定在一个作为
外物的tree上的时候,活跃性是会减弱的,人是会被约束的.
** 想要学的功能
*** 切换到星号以外的树结构标记
之前在youtube看过,确认有这个功能,
不过即使切换,依旧还是树结构,所以其实对于结构没有影响,
影响到的仅仅是外观.
由于在文本结构固定后,什么时候切换都是可以的,所以这个功能以后学也没有问题.
不过,总觉的有些条目的罗列性质强于另一些,所以多少会想要把这些条目的星号换成数字.
*** 表格
其实基本的很容易就学会了.主要是似乎没什么用到的场合.
*** 排序
有些条目的序列性不强,所以坐下字符串排序方便查找?
还是说最好我们能加强树的纵深,减小branch宽度.
*** 文件链接
这个似乎很有必要学下,这样就可以用org整合管理其他文件了.
不过emacs一向有保罗万象的传统,但我还是比较希望用vim或者其他程序来打开链接的文件.
** 论文
有表格,还有一个org-ref.
或许org可以直接用来写论文,转换成latex?
不过如果可以的话网上应该有介绍的.
至少org只有组织功能,没有排版功能,特别是要混合图片的话.

是否可以用orgmode替代latex?
http://emacs-fu.blogspot.co.nz/2011/04/nice-looking-pdfs-with-org-mode-and.html
这里有介绍如何插入citation
http://www.clarkdonley.com/blog/2014-10-26-org-mode-and-writing-papers-some-tips.html
*** 缺陷 
    1. 还不知道怎么处理ref
    2. 图片可以引入,但是怎么做label?
    3. 很明显,org不是用来排版的,所以图片应该不能左右划分布局


** 帮助
   - C-h/F1 k :: 找出特定的按键
** export
*** pdf 
用emacs转换输出pdf,
输出结果适合用evince或者okular查看,结果会随着输出刷新
但是和专业的latex编辑器比起来的问题是
1. 编译pdf时间长,不是针对改动编译的.
2. 需要手动export,而不是改动后直接export,当然这个emacs应该是可以配置的.
不过编辑的同时查看改动,只有在对格式排版的时候才需要.还有公式编辑.
* emacs_org操作纪录,记录下manual中对我来说有用的部分
orgmode和evilmode的混用方案
记录下org中大体的感觉需要记下来的几个快捷键.
** evil normal
*** <ret>
    普通的回车 就和normal模式中的回车一样
*** <m-ret>
    新条目,不过注意会把光标后的内容带着换行
    在无条目航首,会把当前行添加为条目
    所以为了避免触发上面的问题,可以按o开新行后再加条目
*** alt+ up / down
    移动条目
*** m-h
*** alt + left/right
    给条目升降级别
    标记条目,连按标记兄弟条目
*** cut copy
    vim的dd就够了,所以不记这个应该没关系
** evil visual
*** alt + left/right
    给选中的条目批量升降级别
    注意似乎选中的第一行无效
** evil insert
*** <ret>
    普通的回车 就和normal模式中的回车一样
*** <m-ret>
    新条目
*** alt+ up / down
    移动条目
*** alt + left/right
    给条目升降级别
** global?
*** C-c /
    显示特定的比如说todo标记
*** C-c / r
    和上面的类似的功能.
*** m-g n / m-g m-n
** table
   不过一般数据表格其实不可能手写,都是程序格式输出的.
   此外我自己做笔记的话,应该不会用到表格.
*** create table
    c-c |
*** format table
    c-c c-c
*** clear grid
    c-c space
*** move to grod
    tab / shift tab
*** m-a m-e
    grid头部或者尾部
*** move raw/column
    M-up/down/left/right
*** kill/insert row/column
    M-S-up/down/left/right
    M-S快捷键依旧无效
*** c-c ret
    添加横线

** plain list
   
*** 记号
    用的记号包括 - + *  1) 1. ::
*** 例子
**** Lord of the Rings
     My favorite scenes are (in this order)
     1. The attack of the Rohirrim
     2. Eowyn's fight with the witch king
     3. this was already my favorite scene in the book
     4. I really like Miranda Otto.
     5. Peter Jackson being shot by Legolas
     6. on DVD only
He makes a really funny face when it happens.
But in the end, no individual scenes matter but the film as a whole.
Important actors in this film are:
- Elijah Wood :: He plays Frodo
- Sean Astin :: He plays Sam, Frodo's friend.  I still remember
him very well from his role as Mikey Walsh in The Goonies.
*** 操作
    - <TAB> :: (org-cycle) 用处很多,包括调整一个条目的级别,也包括展开,收缩条目 
    - C-c * :: 把list换成headline
    - C-c - :: 改变list记号,现在用的这种带有标题的似乎换不成数字,但是上面那种就没问题. 几种list记号似乎html下看是一样的,可能export的参数需要调整.
    - C-c ^ :: 排序
    - M-<RET> :: (org-inser-heading)
    - M-up/down :: 交换顺序
** 打开url
M-x browse-url

** 输出html
C-c C-e h h
M-x org-html-export-to-html

 用法说明
 在emacs中按<C-c><C-e> 即可选择输出形式.
 暂且来说,html的转换可以直接使用,不需要调整,所以很方便.
*** html
  <C-c><C-e>hh输出到html
  和emacs比,pandoc的输出结果很差,latex公式也无法转换.
  同样的,github也无法处理那些latex公式.
*** pdf
    pdf的正确输出还需要调整.具体看上面.
    然后中文化也有问题.

* vim_org操作纪录
vim orgmode的按键和emacs是不同.
** 开启新条目
   -   ret
   -   m-ret
** 移动
   -   { / } 移动到上下条目
   - ]] [[移动到上下同级条目
         - g{ g} 移动到上级条目
** 改动
*** 升降级
    -   >> <<  条目 
    -   >]] <[[ 条目及子条目 
*** 上下移动
    -    m{ m} 条目
    -    m]] m[[ 条目及子条目
** 复制,剪切
    折叠的情况下普通的dd yy就可以了.
* spacemacs 
  尝试了一下,也没法处理export到firefox的问题.
  其他方面并不知道它提供了什么功能.
不过和vim比 emacs真是高度的自动化,能给出这么大量的提示跳转信息
但是我无法想象这些功能是否是必要的.

* 快捷键原则
  我用s/q绑定了保存/退出.因为没有听说别人这么做,所以大概很少人这么干?
** 树形
   这应该是最普遍的原则,按照功能结构,按层级分配快捷键
   尤其emacs的keybind就是这么干的,而lisp本身就是一棵树.
*** 优势
 - 项目的演化,甚至迁移.
 - 结构化,便于引导新人.
** 压缩字典 
   压缩字典的原则是,把给最高频的操作映射到最短的快捷键上.
   任何一份高度自定义的配置文件应该都会比较接近这种形式吧.
   保存和退出就是如此高频的操作.
** vim的组合模式
   我找不到什么合适的比喻,
   vim的默认快捷键都是相对简单的功能,
   但是组合在一起的时候却能演化出很多情形.
   为了便于组合,当然这些基础的简单功能都必须要给予最短的快捷键.
 

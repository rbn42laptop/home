* mpd
** root
 mpd现在的问题。
 1.读取cue有问题，但是按照其doc，这个功能应该是有的，有机会用arch试试。
 2.如果skip部分文件不读取，这一点应该可以通过python做到。或者说，ncmpcpp是否能做到。因为cue问题没解决，这个现在弄清楚也没有用处。
 3.快捷键修改，更方便的加载playlist
 4.ncmpcpp的某几个版面，比如library好像会出现cpu过载问题，估计是因为library太大了，最好想办法disable这个功能，映射掉快捷键什么的

 Sun 15 May 2016 01:04:07 AM UTC
 现在情况是这样的，其实ncmpcpp有加载cue的能力，gui的gmpc也可以
 gui的gmpc更好，会自动上网搜索art
 不足的地方是，加载cue，只有引用单个文件的时候，才会这么做。

 我们需要的是，类似foobar一样，扫描整个目录，找出cue和一般文件，然后全部加载的功能。

 然后，github上有一个ncmpy项目，和ncmpcpp功能上很类似（按F1，F2切换），界面相对简陋。我很好奇，为什么它们会这么像。
 不管怎么样，ncmpy给了我们一个切入的机会，我们有可能自己写出扫描全局的功能
 不管怎么样，先把它fork下来

 Sun 15 May 2016 01:11:24 AM UTC
 此外，全局扫描功能好像又是一个唯独我想要的功能，所以做出来了也没其他人要吧。而且本来linux用户就少，windows反正有foobar可用

 Sun 15 May 2016 08:31:41 AM UTC
 ncmpy还缺乏title同步
 curses似乎不支持，所以要用类似
 sys.stdout.write("\x1b]2;%s\x07" % title)
 这样的办法

 Mon 16 May 2016 05:04:43 AM NZST
 大体上功能都都全了，但是原来的那个软件似乎线程框架又问题，在resize 窗口的时候，概率性的会出不少问题。
 要解决这个问题，只有，理解其线程框架，以及python-mpd2才行
 考虑到，ncmpy主要用途应该是一次性的打开某些文件夹，所以这个resize的问题就留在那里吧。

 Mon 16 May 2016 07:18:56 AM NZST
 同步问题还是有点麻烦的，如果你希望这个窗口持续开着的化，那么resize就会导致它崩溃。
 暂且的方案是，出现resize的时候，用sleep，那么sleep期间的几次resize就可以放一起了，前提是这几次resize最好是能在sleep期间搞定，超出的话，虽然会有下一次sleep，但是好像还是容易出问题。
 所以resize要长一点，大概20秒，但是期间其他操作就做不了了，所以就是要注意，resize之后一段时间无法操作。不过可以开两个窗口，一个不行的话，去另一个workspace，不管怎么说，这个方法至少实现了foobar2000最主要的库管理功能,而且做的更好，现在都没有必要去修正CDImage的名字了，就是没有art功能，不过这不算很重要


 Mon 16 May 2016 11:28:17 PM NZST
 添加vlc支持？github上有python的vlc client，所以把它和curses结合应该可以，
 不过要这么做的话，需要你理解代码结构然后重构。
 另一方面，意义不是很大的感觉，vlc暂且用rofi控制就够了
 另一方面，视频和音乐付出的注意力不同，所以后者会需要快捷操作降低注意力分配，但是前者就没有这个必要了，因而后者可以容忍随机播放，而视频吸引了注意力，会要求连续性

 Tue 17 May 2016 12:04:53 AM NZST
 curses的界面似乎还可以调整，比如更整齐的布局，制表符号，
 但是问题是你要先熟悉curses的结构，
 由于terminal的先天特性，curses必然和qml不同，比如它会需要有tab

 Tue 17 May 2016 12:08:19 AM NZST
 就各种特性来说，ncmpcpp自然比ncmpy完善很多，比如界面的整洁度，
 缺乏的主要是遍历cue的能力，以及exlude部分文件什么的，这种还是要能编码才能做到的。
 如果说，ncmpcpp可以对外调用python的话，倒是可以实现的，我们可以用python-mpd2来做

 不过要是想要vlc扩展，还是要在ncmpy的基础上弄得,要定制一个通用接口连接vlc和mpd

 Tue 17 May 2016 12:22:32 AM NZST
 我们需要这么一个功能,dislike特定的曲目，在大批加入新曲目的时候（空格键）忽略掉这些曲目。
 各种播放放时下，都挺有用处的。
 看来还是自编脚本的好，ncmpcpp虽然美观，但是实用性还是重要的多

 需要实现的包括，
 在queue版面，选择一个曲目，按“-”消除它,然后标记，用唯一标志记录这个曲目，
 未来空格加载曲目的时候，检测是否属于dislike记录，然后消除它

 不过比起把这个加入queue版面，不如做一个DE级别的快捷键dislike mpd播放中的曲目，因为毕竟听歌中是在其他窗口中的，选歌才是在ncmpy界面，

 Tue 17 May 2016 01:41:29 AM NZST
 关于我对python-mpd2的改动。
 写了一些小的控制脚本，python-mpd2还是很好用的。
 那么我们为什么要改它呢？
 主要原因是它对utf8的支持问题，python3有utf8转码错误问题，而python2可以强制转码，此外我也不确所有的曲名都是utf8，所以改了这部分。
 然后改动之后，发现mpd有read write异常问题，所以就一起改了。
 写过小脚本之后发现，如果抛错的话，简单的重连接就好了，所以那部分异常修改就不必要了，
 所以总的来说，修改python-mpd2，是为了支持对所有文件名正确编码

 Tue 17 May 2016 07:28:32 AM NZST
 有点意外mpd 连 BDMV 都能播放，那就有个问题了，原本的文件类型包含 directory file playlist 这样的话，就会出现arch和iso类型了吧。
 而且，song信息中，file track或许不一定是唯一标志了？

 测试了一下，发现arch类型似乎直接把file路径深入到了arch里面
 考虑到我们现在用的是手动迭代遍历目录的方法，看来arch类型是被归类为directory了

 非常有趣的一点是，我们是以byte的方式接受mpd发送的文件名的，结果arch的路径名，系统的部分得到的名字是utf8的，而arch内部的部分是gbk的，所以当前的代码就无法decode这种类型的文件

 啊，我高估了，我忘了bdmv本来就在iso外的,dvdiso才在iso内，
 iso文件倒是可以展开，但是点进去是空的，不管ncmpcpp还是ncmpy加载iso尝试的结果都一样

 mpd加载bdmv的消耗还是很低的，看来video audio很有效的分离开了。不过要加载bdmv，就真的要面对音轨问题了，

 另一方面，rar，zip什么的好像没有展开，或许加载不了？

 Tue 17 May 2016 08:28:24 AM NZST
 ncmpy 的curses布局的确还有很多调整余地。不过暂时来说，还是用ncmpcpp吧，看情况需要迭代cue的话再开ncmp吧
 尽量控制两者用同样，这样就不会有操作习惯的问题了

 Thu 19 May 2016 04:44:04 AM NZST
 大致可以确定python-mpd2存在某种同步错误.就是发送了某个命令之后,获取的时候出现错误,导致回馈信息被交给了下一个命令.
 而ncmpy的运作方式似乎是线程的,所以这种错误出现的概率就不是很小了

 此外关于utf8编码问题,似乎mpd是强制用utf8解码所用歌曲信息的.要么禁止mpd做这个强制解码,不然似乎转码中多少会有丢失问题出现?


 Fri 27 May 2016 10:14:07 AM NZST
 按现在的情况来说，其实我们主要需要的是添加folder的能力,很明显这部分可以独立出来作为一个脚本命令,然后,如果让它和ranger结合,那么大体的功能应该就足够了?
 那么就可以抛弃独自写ui的选项,而可以直接用ncmpcpp了

 不过,如果用ranger的话,那么playlist和database的界面就完全切割开了,而不可能通过 1 2 切换了,是不是有点不方便呢?
 用ncmpy的话,至少添加了之后,可以方便切换检查的,1 2切换这种可以记下来,和workspace这种动态的东西是不同的

 Sat 28 May 2016 06:45:17 AM NZST
 但是有一个问题就是link,在ncmpy中,你可以确保文件路径都在library中,即使是外链link.但是用cd的时候,路径都是real的,link看不到了.
 ranger似乎可以维持link路径,但是我觉得这是不可靠的,因为我想你或多或少可能会走出路径.
 而ncmpy总是维持在library的link路径下.

 library限定和mpd的设计有关,因为是对外开放的,所以不可以任意性的泄漏此外的路径.其实用foobar的时候我们也是library为主.
 现在的问题就是少量特殊的情况下,用非mpd client的话,会走出library路径以外,这个就没法处理了
 所以要做独立的mpd脚本的话,不太好办,就是因为这样的路径问题

 Thu 30 Jun 2016 12:56:43 AM NZST
 一个有趣的东西
 https://github.com/vehk/mpdnotify
** 问题ape decode fail
   2016-08-17 01:31:57 Wed NZST
   ape文件似乎都解析失败了,以前应该是没问题的.
   之前应该是正常的,因为现在 人衰 没有了.
*** ffmpeg
    错误的源头似乎是这个,因为ape是ffmpeg解析的.
    "ffmpeg/ape: Incorrect extradata"
    但是网上找不到信息
**** 直接转换
     但是测试过,直接用ffmpeg 转ape到mp3是没有问题的.
     转换中有一条警告
     Using AVStream.codec to pass codec parameters to muxers is deprecated, use AVStream.codecpar instead.
*** aur安装 
    mpd-git
    aur安装中,多加了一个安装包,似乎是之前无依赖删除掉的一个.
    不过似乎只是单纯的编译需要.
    安装完成后,问题没有解决.
*** 结果
    没有头绪,问题没有解决.
    所以暂时ape不能decode了,
    可能个问题是本机独有,或者是整个arch的问题.
    前者等到下次重装系统什么的时候应该能解决,后者的话,应该会有其他人报bug进补丁流程吧.
*** bug上报.
    2016-08-21 03:20:19 Sun NZST
    17日有人报了.
    https://bugs.musicpd.org/print_bug_page.php?bug_id=4568
    过段时间应该会解决的吧.
*** 进一步跟踪
https://bugs.musicpd.org/print_bug_page.php?bug_id=4564
问题在08/08已经上报
原因被认为是ffmpeg 的错误
https://trac.ffmpeg.org/ticket/5781
最后结果似乎是ffmpeg 文档不全,导致mpd 错误使用api 
最后修复是在08/23
http://git.musicpd.org/cgit/master/mpd.git/plain/NEWS?h=v0.19.19

根据arch 的记录,这个bug 释出是从 08/06 开始
https://git.archlinux.org/svntogit/packages.git/log/trunk?h=packages/mpd
*** 更新策略
    撇开安全性不谈,
    这个bug影响了两周时间,一年两次的话,也就占据十分之一的时间了.
    我觉得更新策略应该设定为半年.
    如此一个系统安装完使用正常的话,就可以正常用半年了.
    半年后更新,撞上bug的几率应该不会那么大,
    不过如果撞上了,那只能等修复了.

    至少如此的话,撞上bug的几率就比频繁更新小很多了.

    实际上因为我们的使用环境还不稳定,一个系统不一定能用上半年.
    所以系统安装完成后,即使不做更新大概也没问题.过段时间可能就重装了.
    
    但是,
    有一个问题,就是系统使用中,如果需要安装新软件的话,
    如果不做更新的话,似乎安装不了,
    因为旧有的记录的软件地址,archlinux 似乎不做维护,就被扔掉了?
    如果这样的话,在你需要安装新软件的时候,就不得不更新了.
